// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String
  verified Boolean @default(false)

  role             Role                @default(USER) // admin, user
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  assets           Asset[]
  licenses         License[]
  refreshTokens    RefreshToken[]
  verification     VerificationToken?
  passwordReset    PasswordResetToken?
  detectionResults DetectionResult[]
}

model Asset {
  id               String            @id @default(uuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  title            String
  description      String
  fileUrl          String
  hash             String            @unique
  status           String // protected, infringed, pending, etc.
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  licenses         License[]
  takedowns        TakedownRequest[]
  licensePlans     LicensePlan[]
  detectionResults DetectionResult[]
}

model LicensePlan {
  id           String    @id @default(uuid())
  asset        Asset     @relation(fields: [assetId], references: [id])
  assetId      String
  name         String
  price        Decimal
  licenseTerms String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  licenses     License[] // back relation
}

model License {
  id                    String      @id @default(uuid())
  asset                 Asset       @relation(fields: [assetId], references: [id])
  assetId               String
  buyer                 User        @relation(fields: [buyerId], references: [id])
  buyerId               String
  licensePlan           LicensePlan @relation(fields: [licensePlanId], references: [id])
  licensePlanId         String
  price                 Decimal
  licenseTerms          String
  stripePaymentIntentId String? // optional, if paid via Stripe
  status                String // active, expired, revoked
  createdAt             DateTime    @default(now())
}

model TakedownRequest {
  id        String   @id @default(uuid())
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String
  status    String // pending, approved, rejected
  evidence  String
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid()) // unique ID for the refresh token
  token     String    @unique // the refresh token itself (hashed or plain)
  userId    String    @unique // ID of the user who owns this token
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) // time the token was created
  expiresAt DateTime? // expiration date of the refresh token
  // Add more fields if needed (like device info, etc.)
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model DetectionResult {
  id            String   @id @default(uuid())
  userId        String
  assetId       String
  imageUrl      String? // if submitted via URL
  matchedUrl    String? // where potential theft was found
  source        String? // where the asset was found
  sourceIcon    String? // icon for the source (e.g., website, social media)
  similarity    Float?
  detectionType String // 'image' | 'text'
  detectionDate DateTime @default(now())
  notes         String?
  screenshotUrl String? // optional Cloudinary/UploadThing URL
  status        String   @default("matched") // or 'no-match', 'pending'

  user    User             @relation(fields: [userId], references: [id])
  asset   Asset            @relation(fields: [assetId], references: [id])
  matches DetectionMatch[]
}

model DetectionMatch {
  id                String          @id @default(uuid())
  detectionResult   DetectionResult @relation(fields: [detectionResultId], references: [id])
  detectionResultId String
  matchedUrl        String?
  similarity        Float?
  title             String?
  screenshotUrl     String?
}
