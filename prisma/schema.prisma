// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  name     String
  verified Boolean @default(false)

  role          Role                @default(USER) // admin, user
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  assets        Asset[]
  licenses      License[]
  refreshTokens RefreshToken[]
  verification  VerificationToken?
  passwordReset PasswordResetToken?
}

model Asset {
  id           String            @id @default(uuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  title        String
  description  String
  fileUrl      String
  hash         String            @unique
  status       String // protected, infringed, pending, etc.
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  licenses     License[]
  takedowns    TakedownRequest[]
  licensePlans LicensePlan[]
}

model LicensePlan {
  id           String    @id @default(uuid())
  asset        Asset     @relation(fields: [assetId], references: [id])
  assetId      String
  name         String
  price        Decimal
  licenseTerms String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  licenses     License[] // back relation
}

model License {
  id            String      @id @default(uuid())
  asset         Asset       @relation(fields: [assetId], references: [id])
  assetId       String
  buyer         User        @relation(fields: [buyerId], references: [id])
  buyerId       String
  licensePlan   LicensePlan @relation(fields: [licensePlanId], references: [id])
  licensePlanId String
  price         Decimal
  licenseTerms  String
  createdAt     DateTime    @default(now())
}

model TakedownRequest {
  id        String   @id @default(uuid())
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String
  status    String // pending, approved, rejected
  evidence  String
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid()) // unique ID for the refresh token
  token     String    @unique // the refresh token itself (hashed or plain)
  userId    String    @unique // ID of the user who owns this token
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) // time the token was created
  expiresAt DateTime? // expiration date of the refresh token
  // Add more fields if needed (like device info, etc.)
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}
